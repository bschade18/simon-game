{"version":3,"sources":["components/GameDisplay.js","components/GameBoard.js","App.js","index.js"],"names":["GameDisplay","turnCount","restartGame","toggleStrict","strict","className","onClick","id","GameBoard","playerTurn","renderButton","letter","color","App","props","playSound","Audio","play","setState","playerBoard","gameBoard","setTimeout","playRandom","randomColor","Math","floor","random","state","playBoard","run","i","x","colors","document","getElementById","classList","add","indexOf","remove","length","e","target","checkBoard","forEach","index","alert","this","console","log","bind","React","Component","ReactDOM","render"],"mappings":"qSAoBeA,G,MAlBK,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,OAC3D,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,gBAAgBJ,EAAY,EAAI,KAAOA,GACtD,yBAAKI,UAAU,eAAeC,QAAS,kBAAMJ,MAA7C,SAGA,yBACEK,GAAG,SACHF,UAAW,kBAAoBD,GAAU,cACzCE,QAASH,GAHX,aCWSK,EAlBG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACbC,EAAe,SAACC,EAAQC,GAAT,OACnB,yBACEL,GAAII,EACJN,UAAW,cAAgBO,EAC3BN,QAASG,KAGb,OACE,yBAAKJ,UAAU,iBACZK,EAAa,IAAK,SAClBA,EAAa,IAAK,OAClBA,EAAa,IAAK,QAClBA,EAAa,IAAK,YC8HVG,E,YAvIb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,UAAY,SAACH,GACC,IAAII,MAAJ,0DACyCJ,EADzC,SAGNK,QAbW,EAgBnBf,YAAc,WACZ,EAAKgB,SAAS,CACZC,YAAa,GACbC,UAAW,KAGbC,YAAW,kBAAM,EAAKC,eAAc,MAtBnB,EAyBnBA,WAAa,WACX,IACIC,EADa,CAAC,IAAK,IAAK,IAAK,KACJC,KAAKC,MAAsB,EAAhBD,KAAKE,WAE7C,EAAKR,SAAS,CACZE,UAAU,GAAD,mBAAM,EAAKO,MAAMP,WAAjB,CAA4BG,MAEvC,EAAKK,aAhCY,EAmCnBA,UAAY,YACV,SAAUC,EAAIC,EAAGC,EAAGX,EAAWL,GAC7B,IAAIiB,EAAS,CAAC,IAAK,IAAK,IAAK,KAC7BX,YAAW,WACT,IAAIT,EAAQQ,EAAUW,GACtBE,SAASC,eAAetB,GAAOuB,UAAUC,IAAzC,UAAgDxB,EAAhD,WACAG,EAAUiB,EAAOK,QAAQzB,GAAS,KAChCmB,EACFV,YAAW,WACT,IAAIT,EAAQQ,EAAUW,EAAI,GAC1BE,SAASC,eAAetB,GAAOuB,UAAUG,OAAzC,UAAmD1B,EAAnD,WACImB,GAAKD,GAGPD,EAAIC,EAAGC,EAAGX,EAAWL,KAEtB,OACF,KAhBL,CAiBG,EAAKY,MAAMP,UAAUmB,OAAQ,EAAG,EAAKZ,MAAMP,UAAW,EAAKL,YArD7C,EAwDnBN,WAAa,SAAC+B,GACZ,IAAI5B,EAAQ4B,EAAEC,OAAOlC,GAErB0B,SAASC,eAAetB,GAAOuB,UAAUC,IAAzC,UAAgDxB,EAAhD,WAEAS,YAAW,WACTY,SAASC,eAAetB,GAAOuB,UAAUG,OAAzC,UAAmD1B,EAAnD,aACC,KAEH,EAAKG,UAPQ,CAAC,IAAK,IAAK,IAAK,KAOPsB,QAAQzB,GAAS,GAEvC,EAAKM,SAAS,CACZC,YAAY,GAAD,mBAAM,EAAKQ,MAAMR,aAAjB,CAA8BqB,EAAEC,OAAOlC,OAGpDc,YAAW,kBAAM,EAAKqB,eAAc,MAvEnB,EA0EnBA,WAAa,WAAO,IAAD,EACwB,EAAKf,MAAxCP,EADW,EACXA,UAAWD,EADA,EACAA,YAAaf,EADb,EACaA,OAqB9B,GAnBAe,EAAYwB,QACV,SAAU/B,EAAOgC,GACf,GAAIhC,IAAUQ,EAAUwB,GACtB,OAAIxC,GACFyC,MAAM,qBACNC,KAAK5C,gBAGP2C,MAAM,gBACNE,QAAQC,IAAI,WACZF,KAAK5B,SAAS,CACZC,YAAa,UAEf2B,KAAKlB,cAGPqB,KAfF,mBAkBE9B,EAAYoB,OAASnB,EAAUmB,QAE5B,GAA2B,KAAvBpB,EAAYoB,OACrBM,MAAM,qBACN,EAAK3C,kBACA,IACLiB,EAAYA,EAAYoB,OAAS,KAAOnB,EAAUA,EAAUmB,OAAS,GAErE,OAEA,EAAKrB,SAAS,CACZC,YAAa,KAEfE,YAAW,kBAAM,EAAKC,eAAc,QA7GrB,EAiHnBnB,aAAe,WACb,EAAKe,SAAS,CACZd,QAAS,EAAKuB,MAAMvB,UAjHtB,EAAKuB,MAAQ,CACXP,UAAW,GACXD,YAAa,GACbf,QAAQ,GALO,E,sEAwHjB,OACE,yBAAKC,UAAU,kBACb,kBAAC,EAAD,CAAWI,WAAYqC,KAAKrC,aAC5B,kBAAC,EAAD,CACEL,OAAQ0C,KAAKnB,MAAMvB,OACnBkB,WAAYwB,KAAKxB,WACjBrB,UAAW6C,KAAKnB,MAAMP,UAAUmB,OAChCrC,YAAa4C,KAAK5C,YAClBC,aAAc2C,KAAK3C,oB,GAjIX+C,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,W","file":"static/js/main.7e36cee7.chunk.js","sourcesContent":["import React from 'react';\n\nconst GameDisplay = ({ turnCount, restartGame, toggleStrict, strict }) => {\n  return (\n    <div className=\"display-container\">\n      <div className=\"countDisplay\">{turnCount < 1 ? '--' : turnCount}</div>\n      <div className=\"start-button\" onClick={() => restartGame()}>\n        Start\n      </div>\n      <div\n        id=\"strict\"\n        className={'strict-button ' + (strict && 'strictmode')}\n        onClick={toggleStrict}\n      >\n        Strict\n      </div>\n    </div>\n  );\n};\n\nexport default GameDisplay;\n","import React from 'react';\n\nconst GameBoard = ({ playerTurn }) => {\n  const renderButton = (letter, color) => (\n    <div\n      id={letter}\n      className={'gameButton ' + color}\n      onClick={playerTurn}\n    ></div>\n  );\n  return (\n    <div className=\"colors-circle\">\n      {renderButton('g', 'green')}\n      {renderButton('r', 'red')}\n      {renderButton('b', 'blue')}\n      {renderButton('y', 'yellow')}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport './App.css';\nimport GameDisplay from './components/GameDisplay';\nimport GameBoard from './components/GameBoard';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameBoard: [],\n      playerBoard: [],\n      strict: false,\n    };\n  }\n\n  playSound = (color) => {\n    let sound = new Audio(\n      `https://s3.amazonaws.com/freecodecamp/simonSound${color}.mp3`\n    );\n    sound.play();\n  };\n\n  restartGame = () => {\n    this.setState({\n      playerBoard: [],\n      gameBoard: [],\n    });\n\n    setTimeout(() => this.playRandom(), 2000);\n  };\n\n  playRandom = () => {\n    let colorBoard = ['g', 'r', 'b', 'y'];\n    let randomColor = colorBoard[Math.floor(Math.random() * 4)];\n\n    this.setState({\n      gameBoard: [...this.state.gameBoard, randomColor],\n    });\n    this.playBoard();\n  };\n\n  playBoard = () => {\n    (function run(i, x, gameBoard, playSound) {\n      let colors = ['g', 'r', 'b', 'y'];\n      setTimeout(function () {\n        let color = gameBoard[x];\n        document.getElementById(color).classList.add(`${color}-light`);\n        playSound(colors.indexOf(color) + 1);\n        ++x;\n        setTimeout(() => {\n          let color = gameBoard[x - 1];\n          document.getElementById(color).classList.remove(`${color}-light`);\n          if (x >= i) {\n            return;\n          } else {\n            run(i, x, gameBoard, playSound);\n          }\n        }, 500);\n      }, 800);\n    })(this.state.gameBoard.length, 0, this.state.gameBoard, this.playSound);\n  };\n\n  playerTurn = (e) => {\n    let color = e.target.id;\n    let colors = ['g', 'r', 'b', 'y'];\n    document.getElementById(color).classList.add(`${color}-light`);\n\n    setTimeout(() => {\n      document.getElementById(color).classList.remove(`${color}-light`);\n    }, 500);\n\n    this.playSound(colors.indexOf(color) + 1);\n\n    this.setState({\n      playerBoard: [...this.state.playerBoard, e.target.id],\n    });\n\n    setTimeout(() => this.checkBoard(), 150);\n  };\n\n  checkBoard = () => {\n    let { gameBoard, playerBoard, strict } = this.state;\n\n    playerBoard.forEach(\n      function (color, index) {\n        if (color !== gameBoard[index]) {\n          if (strict) {\n            alert('wrong color!');\n            this.restartGame();\n            return;\n          }\n          alert('wrong color!');\n          console.log('correct');\n          this.setState({\n            playerBoard: [],\n          });\n          this.playBoard();\n          return;\n        }\n      }.bind(this)\n    );\n\n    if (playerBoard.length < gameBoard.length) {\n      return;\n    } else if (playerBoard.length === 20) {\n      alert('you won the game!');\n      this.restartGame();\n    } else if (\n      playerBoard[playerBoard.length - 1] !== gameBoard[gameBoard.length - 1]\n    ) {\n      return;\n    } else {\n      this.setState({\n        playerBoard: [],\n      });\n      setTimeout(() => this.playRandom(), 1500);\n    }\n  };\n\n  toggleStrict = () => {\n    this.setState({\n      strict: !this.state.strict,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"grid-container\">\n        <GameBoard playerTurn={this.playerTurn} />\n        <GameDisplay\n          strict={this.state.strict}\n          playRandom={this.playRandom}\n          turnCount={this.state.gameBoard.length}\n          restartGame={this.restartGame}\n          toggleStrict={this.toggleStrict}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}