{"version":3,"sources":["components/GameDisplay.js","App.js","serviceWorker.js","index.js"],"names":["GameDisplay","className","this","props","turnCount","onClick","restartGame","id","enableStrict","React","Component","soundBank","color","url","App","playGreenSound","Audio","play","playRedSound","playBlueSound","playYellowSound","document","getElementById","classList","toggle","state","strict","setState","playerBoard","gameBoard","count","cpuTurn","setTimeout","playRandom","board","randomIndex","Math","floor","random","console","log","randomButton","concat","playBoard","playerTurn","e","target","add","remove","checkBoard","index","forEach","alert","bind","length","run","i","x","greenSound","redSound","blueSound","yellowSound","Container","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d135659f.chunk.js","sourcesContent":["import React from \"react\";\n\nclass GameDisplay extends React.Component {\n  render() {\n    return (\n      <div className=\"display-container\">\n        <div className=\"countDisplay\">\n          {this.props.turnCount < 1 ? \"--\" : this.props.turnCount}\n        </div>\n        <div className=\"start-button\" onClick={this.props.restartGame}>\n          Start\n        </div>\n        <div\n          id=\"strict\"\n          className=\"strict-button\"\n          onClick={this.props.enableStrict}\n        >\n          Strict\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameDisplay;\n","import React from \"react\";\nimport \"./App.css\";\nimport GameDisplay from \"./components/GameDisplay\";\nimport { Container } from \"reactstrap\";\n\nlet soundBank = [\n  {\n    id: \"g\",\n    color: \"green\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n  },\n  {\n    id: \"r\",\n    color: \"red\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n  },\n  {\n    id: \"b\",\n    color: \"blue\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n  },\n  {\n    id: \"y\",\n    color: \"yellow\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameBoard: [],\n      playerBoard: [],\n      index: 0,\n      cpuTurn: true,\n      strict: false\n    };\n  }\n  playGreenSound = () => {\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n    );\n    sound.play();\n  };\n\n  playRedSound = () => {\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n    );\n    sound.play();\n  };\n\n  playBlueSound = () => {\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n    );\n    sound.play();\n  };\n\n  playYellowSound = () => {\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n    );\n    sound.play();\n  };\n\n  enableStrict = () => {\n    var cool = document.getElementById(\"strict\");\n    cool.classList.toggle(\"strictmode\");\n    this.state.strict\n      ? this.setState({\n          strict: false\n        })\n      : this.setState({\n          strict: true\n        });\n  };\n\n  restartGame = () => {\n    this.setState({\n      playerBoard: [],\n      gameBoard: [],\n      count: 0,\n      cpuTurn: true\n    });\n\n    setTimeout(() => this.playRandom(), 2000);\n  };\n\n  playRandom = () => {\n    let board = this.state.gameBoard;\n    let randomIndex = Math.floor(Math.random() * 4);\n    console.log(randomIndex);\n    let randomButton = soundBank[randomIndex].id;\n\n    this.setState({\n      gameBoard: board.concat(randomButton),\n      count: this.state.count + 1\n    });\n    this.playBoard();\n  };\n\n  playerTurn = e => {\n    let color = e.target.id;\n\n    if (color === \"g\") {\n      document.getElementById(\"g\").classList.add(\"g-light\");\n      this.playGreenSound();\n    } else if (color === \"r\") {\n      document.getElementById(\"r\").classList.add(\"r-light\");\n      this.playRedSound();\n    } else if (color === \"b\") {\n      document.getElementById(\"b\").classList.add(\"b-light\");\n      this.playBlueSound();\n    } else {\n      document.getElementById(\"y\").classList.add(\"y-light\");\n      this.playYellowSound();\n    }\n    setTimeout(() => {\n      document.getElementById(color).classList.remove(`${color}-light`);\n    }, 500);\n\n    this.setState({\n      playerBoard: this.state.playerBoard.concat(e.target.id)\n    });\n\n    setTimeout(() => this.checkBoard(), 150);\n  };\n\n  checkBoard = () => {\n    let index = this.state.index;\n    let gameBoard = this.state.gameBoard;\n    let state = this.state;\n    let playerBoard = this.state.playerBoard;\n    playerBoard.forEach(\n      function(color, index, playerBoard) {\n        if (color !== gameBoard[index]) {\n          if (state.strict) {\n            alert(\"wrong color!\");\n            this.restartGame();\n            return;\n          }\n          alert(\"wrong color!\");\n          this.setState({\n            playerBoard: []\n          });\n          this.playBoard();\n          return;\n        }\n      }.bind(this)\n    );\n\n    if (playerBoard.length < gameBoard.length) {\n      return;\n    } else if (playerBoard.length === 20) {\n      alert(\"you won the game!\");\n      this.restartGame();\n    } else if (playerBoard[index + 1] === gameBoard[index + 1]) {\n      this.setState({\n        playerBoard: []\n      });\n      setTimeout(() => this.playRandom(), 1500);\n    }\n  };\n\n  playBoard = () => {\n    (function run(\n      i,\n      x,\n      gameBoard,\n      greenSound,\n      redSound,\n      blueSound,\n      yellowSound\n    ) {\n      setTimeout(function() {\n        if (gameBoard[x] === \"g\") {\n          document.getElementById(\"g\").classList.add(\"g-light\");\n          greenSound();\n        } else if (gameBoard[x] === \"r\") {\n          document.getElementById(\"r\").classList.add(\"r-light\");\n          redSound();\n        } else if (gameBoard[x] === \"b\") {\n          document.getElementById(\"b\").classList.add(\"b-light\");\n          blueSound();\n        } else {\n          document.getElementById(\"y\").classList.add(\"y-light\");\n          yellowSound();\n        }\n        ++x;\n        setTimeout(() => {\n          let color = gameBoard[x - 1];\n          document.getElementById(color).classList.remove(`${color}-light`);\n          if (x >= i) {\n            return;\n          } else {\n            run(i, x, gameBoard, greenSound, redSound, blueSound, yellowSound);\n          }\n        }, 500);\n      }, 800);\n    })(\n      this.state.gameBoard.length,\n      0,\n      this.state.gameBoard,\n      this.playGreenSound,\n      this.playRedSound,\n      this.playBlueSound,\n      this.playYellowSound\n    );\n  };\n\n  render() {\n    return (\n      <Container>\n        <div className=\"grid-container\">\n          <div className=\"colors-circle\">\n            <div\n              id=\"g\"\n              className=\"gameButton green\"\n              onClick={this.playerTurn}\n            ></div>\n            <div\n              id=\"r\"\n              className=\"gameButton red\"\n              onClick={this.playerTurn}\n            ></div>\n            <div\n              id=\"b\"\n              className=\"gameButton blue\"\n              onClick={this.playerTurn}\n            ></div>\n            <div\n              id=\"y\"\n              className=\"gameButton yellow\"\n              onClick={this.playerTurn}\n            ></div>\n          </div>\n          <GameDisplay\n            playRandom={this.playRandom}\n            turnCount={this.state.gameBoard.length}\n            restartGame={this.restartGame}\n            enableStrict={this.enableStrict}\n          />\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}