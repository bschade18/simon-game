{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundBank","id","color","url","GameDisplay","React","Component","className","this","props","turnCount","onClick","restartGame","enableStrict","App","state","gameBoard","playerBoard","index","cpuTurn","strict","playRandom","bind","playGreenSound","playRedSound","playBlueSound","playYellowSound","playBoard","playerTurn","checkBoard","Audio","play","e","document","getElementById","classList","toggle","setState","count","setTimeout","board","randomIndex","Math","floor","random","console","log","randomButton","concat","target","add","remove","forEach","alert","length","run","i","x","greenSound","redSound","blueSound","yellowSound","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8501ef5b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nlet soundBank = [\n  {\n    id: \"g\",\n    color: \"green\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n  },\n  {\n    id: \"r\",\n    color: \"red\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n  },\n  {\n    id: \"b\",\n    color: \"blue\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n  },\n  {\n    id: \"y\",\n    color: \"yellow\",\n    url: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n  }\n];\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <div>\n        <button\n          id=\"r\"\n          className=\"gameButton red\"\n          onClick={this.props.playRedSound}\n        ></button>\n        <button\n          id=\"b\"\n          className=\"gameButton blue\"\n          onClick={this.props.playBlueSound}\n        ></button>\n        <button\n          id=\"y\"\n          className=\"gameButton yellow\"\n          onClick={this.props.playYellowSound}\n        ></button>\n      </div>\n    );\n  }\n}\n\nclass GameDisplay extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"display-container\">\n          <div className=\"countDisplay\">\n            {this.props.turnCount < 1 ? \"--\" : this.props.turnCount}\n          </div>\n          <div className=\"start-button\" onClick={this.props.restartGame}>\n            Start\n          </div>\n          <div\n            id=\"strict\"\n            className=\"strict-button\"\n            onClick={this.props.enableStrict}\n          >\n            Strict\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameBoard: [],\n      playerBoard: [],\n      index: 0,\n      cpuTurn: true,\n      strict: false\n    };\n    this.playRandom = this.playRandom.bind(this);\n    this.playGreenSound = this.playGreenSound.bind(this);\n    this.playRedSound = this.playRedSound.bind(this);\n    this.playBlueSound = this.playBlueSound.bind(this);\n    this.playYellowSound = this.playYellowSound.bind(this);\n\n    this.playBoard = this.playBoard.bind(this);\n\n    this.restartGame = this.restartGame.bind(this);\n    this.playerTurn = this.playerTurn.bind(this);\n    this.checkBoard = this.checkBoard.bind(this);\n\n    this.enableStrict = this.enableStrict.bind(this);\n  }\n  playGreenSound() {\n    let playerBoard = this.state.playerBoard;\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n    );\n    sound.play();\n  }\n\n  playRedSound() {\n    let playerBoard = this.state.playerBoard;\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n    );\n    sound.play();\n  }\n\n  playBlueSound() {\n    let playerBoard = this.state.playerBoard;\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n    );\n    sound.play();\n  }\n\n  playYellowSound() {\n    let playerBoard = this.state.playerBoard;\n    let sound = new Audio(\n      \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n    );\n    sound.play();\n  }\n\n  enableStrict(e) {\n    var cool = document.getElementById(\"strict\");\n    cool.classList.toggle(\"strictmode\");\n    this.state.strict\n      ? this.setState({\n          strict: false\n        })\n      : this.setState({\n          strict: true\n        });\n  }\n\n  restartGame() {\n    this.setState({\n      playerBoard: [],\n      gameBoard: [],\n      count: 0,\n      cpuTurn: true\n    });\n\n    setTimeout(() => this.playRandom(), 2000);\n  }\n\n  playRandom() {\n    let board = this.state.gameBoard;\n    let randomIndex = Math.floor(Math.random() * 4);\n    console.log(randomIndex);\n    let randomButton = soundBank[randomIndex].id;\n\n    this.setState({\n      gameBoard: board.concat(randomButton),\n      count: this.state.count + 1\n    });\n    this.playBoard();\n  }\n\n  playerTurn(e) {\n    let playerBoard = this.state.playerBoard;\n    let color = e.target.id;\n\n    if (color === \"g\") {\n      document.getElementById(\"g\").classList.add(\"g-light\");\n      this.playGreenSound();\n    } else if (color === \"r\") {\n      document.getElementById(\"r\").classList.add(\"r-light\");\n      this.playRedSound();\n    } else if (color === \"b\") {\n      document.getElementById(\"b\").classList.add(\"b-light\");\n      this.playBlueSound();\n    } else {\n      document.getElementById(\"y\").classList.add(\"y-light\");\n      this.playYellowSound();\n    }\n    setTimeout(() => {\n      document.getElementById(color).classList.remove(`${color}-light`);\n    }, 500);\n\n    this.setState({\n      playerBoard: this.state.playerBoard.concat(e.target.id)\n    });\n\n    setTimeout(() => this.checkBoard(), 150);\n  }\n\n  checkBoard() {\n    let index = this.state.index;\n    let gameBoard = this.state.gameBoard;\n    let state = this.state;\n    let playerBoard = this.state.playerBoard;\n    playerBoard.forEach(\n      function(color, index, playerBoard) {\n        if (color !== gameBoard[index]) {\n          if (state.strict) {\n            alert(\"wrong color!\");\n            this.restartGame();\n            return;\n          }\n          alert(\"wrong color!\");\n          this.setState({\n            playerBoard: []\n          });\n          this.playBoard();\n          return;\n        }\n      }.bind(this)\n    );\n\n    if (playerBoard.length < gameBoard.length) {\n      return;\n    } else if (playerBoard.length === 20) {\n      alert(\"you won the game!\");\n      this.restartGame();\n    } else if (playerBoard[index + 1] === gameBoard[index + 1]) {\n      this.setState({\n        playerBoard: []\n      });\n      setTimeout(() => this.playRandom(), 1500);\n    }\n  }\n\n  playBoard() {\n    (function run(\n      i,\n      x,\n      gameBoard,\n      greenSound,\n      redSound,\n      blueSound,\n      yellowSound\n    ) {\n      setTimeout(function() {\n        if (gameBoard[x] === \"g\") {\n          document.getElementById(\"g\").classList.add(\"g-light\");\n          greenSound();\n        } else if (gameBoard[x] === \"r\") {\n          document.getElementById(\"r\").classList.add(\"r-light\");\n          redSound();\n        } else if (gameBoard[x] === \"b\") {\n          document.getElementById(\"b\").classList.add(\"b-light\");\n          blueSound();\n        } else {\n          document.getElementById(\"y\").classList.add(\"y-light\");\n          yellowSound();\n        }\n        ++x;\n        setTimeout(() => {\n          let color = gameBoard[x - 1];\n          document.getElementById(color).classList.remove(`${color}-light`);\n          if (x >= i) {\n            return;\n          } else {\n            run(i, x, gameBoard, greenSound, redSound, blueSound, yellowSound);\n          }\n        }, 500);\n      }, 800);\n    })(\n      this.state.gameBoard.length,\n      0,\n      this.state.gameBoard,\n      this.playGreenSound,\n      this.playRedSound,\n      this.playBlueSound,\n      this.playYellowSound\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"grid-container\">\n        <div className=\"colors-circle\">\n          <div\n            id=\"g\"\n            className=\"gameButton green\"\n            onClick={this.playerTurn}\n          ></div>\n          <div\n            id=\"r\"\n            className=\"gameButton red\"\n            onClick={this.playerTurn}\n          ></div>\n          <div\n            id=\"b\"\n            className=\"gameButton blue\"\n            onClick={this.playerTurn}\n          ></div>\n          <div\n            id=\"y\"\n            className=\"gameButton yellow\"\n            onClick={this.playerTurn}\n          ></div>\n        </div>\n        <GameDisplay\n          playRandom={this.playRandom}\n          turnCount={this.state.gameBoard.length}\n          restartGame={this.restartGame}\n          enableStrict={this.enableStrict}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}